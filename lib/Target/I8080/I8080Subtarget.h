//===-- I8080Subtarget.h - Define Subtarget for the I8080 ----------*- C++ -*--===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file declares the I8080 specific subclass of TargetSubtargetInfo.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_I8080_I8080SUBTARGET_H
#define LLVM_LIB_TARGET_I8080_I8080SUBTARGET_H

#include "I8080FrameLowering.h"
#include "I8080ISelLowering.h"
#include "I8080InstrInfo.h"
#include "I8080SelectionDAGInfo.h"
#include "llvm/CodeGen/TargetSubtargetInfo.h"

#define GET_SUBTARGETINFO_HEADER
#include "I8080GenSubtargetInfo.inc"

namespace llvm {
class I8080TargetMachine;

class I8080Subtarget final : public I8080GenSubtargetInfo {
  /// True if compiling for 24-bit, false for 16-bit.
  //bool In24BitMode;

  /// True if compiling for 16-bit, false for 24-bit.
  bool In16BitMode;

  /// True if target has undocumented i8080 instructions.
  bool HasUndocOps;

  /// True if target has ez80 instructions.
  //bool HasEI8080Ops;

  /// True if target has index half registers (HasUndocOps || HasEI8080Ops).
  bool HasIdxHalfRegs;

  I8080SelectionDAGInfo TSInfo;
  // Ordering here is important. I8080InstrInfo initializes I8080RegisterInfo which
  // I8080TargetLowering needs.
  I8080InstrInfo InstrInfo;
  I8080TargetLowering TLInfo;
  I8080FrameLowering FrameLowering;

public:
  /// This constructor initializes the data members to match that
  /// of the specified triple.
  I8080Subtarget(const Triple &TT, StringRef CPU, StringRef FS,
               const I8080TargetMachine &TM);

  const I8080SelectionDAGInfo *getSelectionDAGInfo() const override {
    return &TSInfo;
  }
  const I8080TargetLowering *getTargetLowering() const override {
    return &TLInfo;
  }
  const I8080InstrInfo *getInstrInfo() const override { return &InstrInfo; }
  const I8080FrameLowering *getFrameLowering() const override {
    return &FrameLowering;
  }
  const I8080RegisterInfo *getRegisterInfo() const override {
    return &getInstrInfo()->getRegisterInfo();
  }

  /// ParseSubtargetFeatures - Parses features string setting specified
  /// subtarget options.  Definition of function is auto generated by tblgen.
  void ParseSubtargetFeatures(StringRef CPU, StringRef FS);

private:
  I8080Subtarget &initializeSubtargetDependencies(StringRef CPU, StringRef FS);
  void initializeEnvironment();
public:
  bool is16Bit() const { return In16BitMode; }
#if 0
  /// Is this ez80 (disregarding specific ABI / programming model)
  //bool is24Bit() const { return In24BitMode; }
  bool has16BitEI8080Ops()  const { return false; }
  bool hasEI8080Ops()       const { return HasEI8080Ops;  }
#endif // 0
  bool hasUndocOps()      const { return HasUndocOps; }
  bool hasIndexHalfRegs() const { return HasIdxHalfRegs; }
};
} // End llvm namespace

#endif
